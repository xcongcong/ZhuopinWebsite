{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\"; // FIXME step not support polar\n\nimport * as zrUtil from 'zrender/lib/core/util';\nimport SymbolDraw from '../helper/SymbolDraw';\nimport SymbolClz from '../helper/Symbol';\nimport lineAnimationDiff from './lineAnimationDiff';\nimport * as graphic from '../../util/graphic';\nimport * as modelUtil from '../../util/model';\nimport { ECPolyline, ECPolygon } from './poly';\nimport ChartView from '../../view/Chart';\nimport { prepareDataCoordInfo, getStackedOnPoint } from './helper';\nimport { createGridClipPath, createPolarClipPath } from '../helper/createClipPathFromCoordSys';\nimport { isCoordinateSystemType } from '../../coord/CoordinateSystem';\nimport { setStatesStylesFromModel, setStatesFlag, enableHoverEmphasis, SPECIAL_STATES } from '../../util/states';\nimport { setLabelStyle, getLabelStatesModels, labelInner } from '../../label/labelStyle';\nimport { getDefaultLabel, getDefaultInterpolatedLabel } from '../helper/labelHelper';\nimport { getECData } from '../../util/innerStore';\nimport { createFloat32Array } from '../../util/vendor';\nimport { convertToColorString } from '../../util/format';\nimport { lerp } from 'zrender/lib/tool/color';\n\nfunction isPointsSame(points1, points2) {\n  if (points1.length !== points2.length) {\n    return;\n  }\n\n  for (var i = 0; i < points1.length; i++) {\n    if (points1[i] !== points2[i]) {\n      return;\n    }\n  }\n\n  return true;\n}\n\nfunction bboxFromPoints(points) {\n  var minX = Infinity;\n  var minY = Infinity;\n  var maxX = -Infinity;\n  var maxY = -Infinity;\n\n  for (var i = 0; i < points.length;) {\n    var x = points[i++];\n    var y = points[i++];\n\n    if (!isNaN(x)) {\n      minX = Math.min(x, minX);\n      maxX = Math.max(x, maxX);\n    }\n\n    if (!isNaN(y)) {\n      minY = Math.min(y, minY);\n      maxY = Math.max(y, maxY);\n    }\n  }\n\n  return [[minX, minY], [maxX, maxY]];\n}\n\nfunction getBoundingDiff(points1, points2) {\n  var _a = bboxFromPoints(points1),\n      min1 = _a[0],\n      max1 = _a[1];\n\n  var _b = bboxFromPoints(points2),\n      min2 = _b[0],\n      max2 = _b[1]; // Get a max value from each corner of two boundings.\n\n\n  return Math.max(Math.abs(min1[0] - min2[0]), Math.abs(min1[1] - min2[1]), Math.abs(max1[0] - max2[0]), Math.abs(max1[1] - max2[1]));\n}\n\nfunction getSmooth(smooth) {\n  return typeof smooth === 'number' ? smooth : smooth ? 0.5 : 0;\n}\n\nfunction getStackedOnPoints(coordSys, data, dataCoordInfo) {\n  if (!dataCoordInfo.valueDim) {\n    return [];\n  }\n\n  var len = data.count();\n  var points = createFloat32Array(len * 2);\n\n  for (var idx = 0; idx < len; idx++) {\n    var pt = getStackedOnPoint(dataCoordInfo, coordSys, data, idx);\n    points[idx * 2] = pt[0];\n    points[idx * 2 + 1] = pt[1];\n  }\n\n  return points;\n}\n\nfunction turnPointsIntoStep(points, coordSys, stepTurnAt) {\n  var baseAxis = coordSys.getBaseAxis();\n  var baseIndex = baseAxis.dim === 'x' || baseAxis.dim === 'radius' ? 0 : 1;\n  var stepPoints = [];\n  var i = 0;\n  var stepPt = [];\n  var pt = [];\n  var nextPt = [];\n\n  for (; i < points.length - 2; i += 2) {\n    nextPt[0] = points[i + 2];\n    nextPt[1] = points[i + 3];\n    pt[0] = points[i];\n    pt[1] = points[i + 1];\n    stepPoints.push(pt[0], pt[1]);\n\n    switch (stepTurnAt) {\n      case 'end':\n        stepPt[baseIndex] = nextPt[baseIndex];\n        stepPt[1 - baseIndex] = pt[1 - baseIndex];\n        stepPoints.push(stepPt[0], stepPt[1]);\n        break;\n\n      case 'middle':\n        var middle = (pt[baseIndex] + nextPt[baseIndex]) / 2;\n        var stepPt2 = [];\n        stepPt[baseIndex] = stepPt2[baseIndex] = middle;\n        stepPt[1 - baseIndex] = pt[1 - baseIndex];\n        stepPt2[1 - baseIndex] = nextPt[1 - baseIndex];\n        stepPoints.push(stepPt[0], stepPt[1]);\n        stepPoints.push(stepPt2[0], stepPt2[1]);\n        break;\n\n      default:\n        // default is start\n        stepPt[baseIndex] = pt[baseIndex];\n        stepPt[1 - baseIndex] = nextPt[1 - baseIndex];\n        stepPoints.push(stepPt[0], stepPt[1]);\n    }\n  } // Last points\n\n\n  stepPoints.push(points[i++], points[i++]);\n  return stepPoints;\n}\n/**\n * Clip color stops to edge. Avoid creating too large gradients.\n * Which may lead to blurry when GPU acceleration is enabled. See #15680\n *\n * The stops has been sorted from small to large.\n */\n\n\nfunction clipColorStops(colorStops, maxSize) {\n  var newColorStops = [];\n  var len = colorStops.length; // coord will always < 0 in prevOutOfRangeColorStop.\n\n  var prevOutOfRangeColorStop;\n  var prevInRangeColorStop;\n\n  function lerpStop(stop0, stop1, clippedCoord) {\n    var coord0 = stop0.coord;\n    var p = (clippedCoord - coord0) / (stop1.coord - coord0);\n    var color = lerp(p, [stop0.color, stop1.color]);\n    return {\n      coord: clippedCoord,\n      color: color\n    };\n  }\n\n  for (var i = 0; i < len; i++) {\n    var stop_1 = colorStops[i];\n    var coord = stop_1.coord;\n\n    if (coord < 0) {\n      prevOutOfRangeColorStop = stop_1;\n    } else if (coord > maxSize) {\n      if (prevInRangeColorStop) {\n        newColorStops.push(lerpStop(prevInRangeColorStop, stop_1, maxSize));\n      } else if (prevOutOfRangeColorStop) {\n        // If there are two stops and coord range is between these two stops\n        newColorStops.push(lerpStop(prevOutOfRangeColorStop, stop_1, 0), lerpStop(prevOutOfRangeColorStop, stop_1, maxSize));\n      } // All following stop will be out of range. So just ignore them.\n\n\n      break;\n    } else {\n      if (prevOutOfRangeColorStop) {\n        newColorStops.push(lerpStop(prevOutOfRangeColorStop, stop_1, 0)); // Reset\n\n        prevOutOfRangeColorStop = null;\n      }\n\n      newColorStops.push(stop_1);\n      prevInRangeColorStop = stop_1;\n    }\n  }\n\n  return newColorStops;\n}\n\nfunction getVisualGradient(data, coordSys, api) {\n  var visualMetaList = data.getVisual('visualMeta');\n\n  if (!visualMetaList || !visualMetaList.length || !data.count()) {\n    // When data.count() is 0, gradient range can not be calculated.\n    return;\n  }\n\n  if (coordSys.type !== 'cartesian2d') {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn('Visual map on line style is only supported on cartesian2d.');\n    }\n\n    return;\n  }\n\n  var coordDim;\n  var visualMeta;\n\n  for (var i = visualMetaList.length - 1; i >= 0; i--) {\n    var dimInfo = data.getDimensionInfo(visualMetaList[i].dimension);\n    coordDim = dimInfo && dimInfo.coordDim; // Can only be x or y\n\n    if (coordDim === 'x' || coordDim === 'y') {\n      visualMeta = visualMetaList[i];\n      break;\n    }\n  }\n\n  if (!visualMeta) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn('Visual map on line style only support x or y dimension.');\n    }\n\n    return;\n  } // If the area to be rendered is bigger than area defined by LinearGradient,\n  // the canvas spec prescribes that the color of the first stop and the last\n  // stop should be used. But if two stops are added at offset 0, in effect\n  // browsers use the color of the second stop to render area outside\n  // LinearGradient. So we can only infinitesimally extend area defined in\n  // LinearGradient to render `outerColors`.\n\n\n  var axis = coordSys.getAxis(coordDim); // dataToCoord mapping may not be linear, but must be monotonic.\n\n  var colorStops = zrUtil.map(visualMeta.stops, function (stop) {\n    // offset will be calculated later.\n    return {\n      coord: axis.toGlobalCoord(axis.dataToCoord(stop.value)),\n      color: stop.color\n    };\n  });\n  var stopLen = colorStops.length;\n  var outerColors = visualMeta.outerColors.slice();\n\n  if (stopLen && colorStops[0].coord > colorStops[stopLen - 1].coord) {\n    colorStops.reverse();\n    outerColors.reverse();\n  }\n\n  var colorStopsInRange = clipColorStops(colorStops, coordDim === 'x' ? api.getWidth() : api.getHeight());\n  var inRangeStopLen = colorStopsInRange.length;\n\n  if (!inRangeStopLen && stopLen) {\n    // All stops are out of range. All will be the same color.\n    return colorStops[0].coord < 0 ? outerColors[1] ? outerColors[1] : colorStops[stopLen - 1].color : outerColors[0] ? outerColors[0] : colorStops[0].color;\n  }\n\n  var tinyExtent = 10; // Arbitrary value: 10px\n\n  var minCoord = colorStopsInRange[0].coord - tinyExtent;\n  var maxCoord = colorStopsInRange[inRangeStopLen - 1].coord + tinyExtent;\n  var coordSpan = maxCoord - minCoord;\n\n  if (coordSpan < 1e-3) {\n    return 'transparent';\n  }\n\n  zrUtil.each(colorStopsInRange, function (stop) {\n    stop.offset = (stop.coord - minCoord) / coordSpan;\n  });\n  colorStopsInRange.push({\n    // NOTE: inRangeStopLen may still be 0 if stoplen is zero.\n    offset: inRangeStopLen ? colorStopsInRange[inRangeStopLen - 1].offset : 0.5,\n    color: outerColors[1] || 'transparent'\n  });\n  colorStopsInRange.unshift({\n    offset: inRangeStopLen ? colorStopsInRange[0].offset : 0.5,\n    color: outerColors[0] || 'transparent'\n  });\n  var gradient = new graphic.LinearGradient(0, 0, 0, 0, colorStopsInRange, true);\n  gradient[coordDim] = minCoord;\n  gradient[coordDim + '2'] = maxCoord;\n  return gradient;\n}\n\nfunction getIsIgnoreFunc(seriesModel, data, coordSys) {\n  var showAllSymbol = seriesModel.get('showAllSymbol');\n  var isAuto = showAllSymbol === 'auto';\n\n  if (showAllSymbol && !isAuto) {\n    return;\n  }\n\n  var categoryAxis = coordSys.getAxesByScale('ordinal')[0];\n\n  if (!categoryAxis) {\n    return;\n  } // Note that category label interval strategy might bring some weird effect\n  // in some scenario: users may wonder why some of the symbols are not\n  // displayed. So we show all symbols as possible as we can.\n\n\n  if (isAuto // Simplify the logic, do not determine label overlap here.\n  && canShowAllSymbolForCategory(categoryAxis, data)) {\n    return;\n  } // Otherwise follow the label interval strategy on category axis.\n\n\n  var categoryDataDim = data.mapDimension(categoryAxis.dim);\n  var labelMap = {};\n  zrUtil.each(categoryAxis.getViewLabels(), function (labelItem) {\n    var ordinalNumber = categoryAxis.scale.getRawOrdinalNumber(labelItem.tickValue);\n    labelMap[ordinalNumber] = 1;\n  });\n  return function (dataIndex) {\n    return !labelMap.hasOwnProperty(data.get(categoryDataDim, dataIndex));\n  };\n}\n\nfunction canShowAllSymbolForCategory(categoryAxis, data) {\n  // In mose cases, line is monotonous on category axis, and the label size\n  // is close with each other. So we check the symbol size and some of the\n  // label size alone with the category axis to estimate whether all symbol\n  // can be shown without overlap.\n  var axisExtent = categoryAxis.getExtent();\n  var availSize = Math.abs(axisExtent[1] - axisExtent[0]) / categoryAxis.scale.count();\n  isNaN(availSize) && (availSize = 0); // 0/0 is NaN.\n  // Sampling some points, max 5.\n\n  var dataLen = data.count();\n  var step = Math.max(1, Math.round(dataLen / 5));\n\n  for (var dataIndex = 0; dataIndex < dataLen; dataIndex += step) {\n    if (SymbolClz.getSymbolSize(data, dataIndex // Only for cartesian, where `isHorizontal` exists.\n    )[categoryAxis.isHorizontal() ? 1 : 0] // Empirical number\n    * 1.5 > availSize) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isPointNull(x, y) {\n  return isNaN(x) || isNaN(y);\n}\n\nfunction getLastIndexNotNull(points) {\n  var len = points.length / 2;\n\n  for (; len > 0; len--) {\n    if (!isPointNull(points[len * 2 - 2], points[len * 2 - 1])) {\n      break;\n    }\n  }\n\n  return len - 1;\n}\n\nfunction getPointAtIndex(points, idx) {\n  return [points[idx * 2], points[idx * 2 + 1]];\n}\n\nfunction getIndexRange(points, xOrY, dim) {\n  var len = points.length / 2;\n  var dimIdx = dim === 'x' ? 0 : 1;\n  var a;\n  var b;\n  var prevIndex = 0;\n  var nextIndex = -1;\n\n  for (var i = 0; i < len; i++) {\n    b = points[i * 2 + dimIdx];\n\n    if (isNaN(b) || isNaN(points[i * 2 + 1 - dimIdx])) {\n      continue;\n    }\n\n    if (i === 0) {\n      a = b;\n      continue;\n    }\n\n    if (a <= xOrY && b >= xOrY || a >= xOrY && b <= xOrY) {\n      nextIndex = i;\n      break;\n    }\n\n    prevIndex = i;\n    a = b;\n  }\n\n  return {\n    range: [prevIndex, nextIndex],\n    t: (xOrY - a) / (b - a)\n  };\n}\n\nfunction anyStateShowEndLabel(seriesModel) {\n  if (seriesModel.get(['endLabel', 'show'])) {\n    return true;\n  }\n\n  for (var i = 0; i < SPECIAL_STATES.length; i++) {\n    if (seriesModel.get([SPECIAL_STATES[i], 'endLabel', 'show'])) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction createLineClipPath(lineView, coordSys, hasAnimation, seriesModel) {\n  if (isCoordinateSystemType(coordSys, 'cartesian2d')) {\n    var endLabelModel_1 = seriesModel.getModel('endLabel');\n    var valueAnimation_1 = endLabelModel_1.get('valueAnimation');\n    var data_1 = seriesModel.getData();\n    var labelAnimationRecord_1 = {\n      lastFrameIndex: 0\n    };\n    var during = anyStateShowEndLabel(seriesModel) ? function (percent, clipRect) {\n      lineView._endLabelOnDuring(percent, clipRect, data_1, labelAnimationRecord_1, valueAnimation_1, endLabelModel_1, coordSys);\n    } : null;\n    var isHorizontal = coordSys.getBaseAxis().isHorizontal();\n    var clipPath = createGridClipPath(coordSys, hasAnimation, seriesModel, function () {\n      var endLabel = lineView._endLabel;\n\n      if (endLabel && hasAnimation) {\n        if (labelAnimationRecord_1.originalX != null) {\n          endLabel.attr({\n            x: labelAnimationRecord_1.originalX,\n            y: labelAnimationRecord_1.originalY\n          });\n        }\n      }\n    }, during); // Expand clip shape to avoid clipping when line value exceeds axis\n\n    if (!seriesModel.get('clip', true)) {\n      var rectShape = clipPath.shape;\n      var expandSize = Math.max(rectShape.width, rectShape.height);\n\n      if (isHorizontal) {\n        rectShape.y -= expandSize;\n        rectShape.height += expandSize * 2;\n      } else {\n        rectShape.x -= expandSize;\n        rectShape.width += expandSize * 2;\n      }\n    } // Set to the final frame. To make sure label layout is right.\n\n\n    if (during) {\n      during(1, clipPath);\n    }\n\n    return clipPath;\n  } else {\n    if (process.env.NODE_ENV !== 'production') {\n      if (seriesModel.get(['endLabel', 'show'])) {\n        console.warn('endLabel is not supported for lines in polar systems.');\n      }\n    }\n\n    return createPolarClipPath(coordSys, hasAnimation, seriesModel);\n  }\n}\n\nfunction getEndLabelStateSpecified(endLabelModel, coordSys) {\n  var baseAxis = coordSys.getBaseAxis();\n  var isHorizontal = baseAxis.isHorizontal();\n  var isBaseInversed = baseAxis.inverse;\n  var align = isHorizontal ? isBaseInversed ? 'right' : 'left' : 'center';\n  var verticalAlign = isHorizontal ? 'middle' : isBaseInversed ? 'top' : 'bottom';\n  return {\n    normal: {\n      align: endLabelModel.get('align') || align,\n      verticalAlign: endLabelModel.get('verticalAlign') || verticalAlign\n    }\n  };\n}\n\nvar LineView =\n/** @class */\nfunction (_super) {\n  __extends(LineView, _super);\n\n  function LineView() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  LineView.prototype.init = function () {\n    var lineGroup = new graphic.Group();\n    var symbolDraw = new SymbolDraw();\n    this.group.add(symbolDraw.group);\n    this._symbolDraw = symbolDraw;\n    this._lineGroup = lineGroup;\n  };\n\n  LineView.prototype.render = function (seriesModel, ecModel, api) {\n    var _this = this;\n\n    var coordSys = seriesModel.coordinateSystem;\n    var group = this.group;\n    var data = seriesModel.getData();\n    var lineStyleModel = seriesModel.getModel('lineStyle');\n    var areaStyleModel = seriesModel.getModel('areaStyle');\n    var points = data.getLayout('points') || [];\n    var isCoordSysPolar = coordSys.type === 'polar';\n    var prevCoordSys = this._coordSys;\n    var symbolDraw = this._symbolDraw;\n    var polyline = this._polyline;\n    var polygon = this._polygon;\n    var lineGroup = this._lineGroup;\n    var hasAnimation = seriesModel.get('animation');\n    var isAreaChart = !areaStyleModel.isEmpty();\n    var valueOrigin = areaStyleModel.get('origin');\n    var dataCoordInfo = prepareDataCoordInfo(coordSys, data, valueOrigin);\n    var stackedOnPoints = isAreaChart && getStackedOnPoints(coordSys, data, dataCoordInfo);\n    var showSymbol = seriesModel.get('showSymbol');\n    var isIgnoreFunc = showSymbol && !isCoordSysPolar && getIsIgnoreFunc(seriesModel, data, coordSys); // Remove temporary symbols\n\n    var oldData = this._data;\n    oldData && oldData.eachItemGraphicEl(function (el, idx) {\n      if (el.__temp) {\n        group.remove(el);\n        oldData.setItemGraphicEl(idx, null);\n      }\n    }); // Remove previous created symbols if showSymbol changed to false\n\n    if (!showSymbol) {\n      symbolDraw.remove();\n    }\n\n    group.add(lineGroup); // FIXME step not support polar\n\n    var step = !isCoordSysPolar ? seriesModel.get('step') : false;\n    var clipShapeForSymbol;\n\n    if (coordSys && coordSys.getArea && seriesModel.get('clip', true)) {\n      clipShapeForSymbol = coordSys.getArea(); // Avoid float number rounding error for symbol on the edge of axis extent.\n      // See #7913 and `test/dataZoom-clip.html`.\n\n      if (clipShapeForSymbol.width != null) {\n        clipShapeForSymbol.x -= 0.1;\n        clipShapeForSymbol.y -= 0.1;\n        clipShapeForSymbol.width += 0.2;\n        clipShapeForSymbol.height += 0.2;\n      } else if (clipShapeForSymbol.r0) {\n        clipShapeForSymbol.r0 -= 0.5;\n        clipShapeForSymbol.r += 0.5;\n      }\n    }\n\n    this._clipShapeForSymbol = clipShapeForSymbol;\n    var visualColor = getVisualGradient(data, coordSys, api) || data.getVisual('style')[data.getVisual('drawType')]; // Initialization animation or coordinate system changed\n\n    if (!(polyline && prevCoordSys.type === coordSys.type && step === this._step)) {\n      showSymbol && symbolDraw.updateData(data, {\n        isIgnore: isIgnoreFunc,\n        clipShape: clipShapeForSymbol,\n        disableAnimation: true,\n        getSymbolPoint: function (idx) {\n          return [points[idx * 2], points[idx * 2 + 1]];\n        }\n      });\n      hasAnimation && this._initSymbolLabelAnimation(data, coordSys, clipShapeForSymbol);\n\n      if (step) {\n        // TODO If stacked series is not step\n        points = turnPointsIntoStep(points, coordSys, step);\n\n        if (stackedOnPoints) {\n          stackedOnPoints = turnPointsIntoStep(stackedOnPoints, coordSys, step);\n        }\n      }\n\n      polyline = this._newPolyline(points);\n\n      if (isAreaChart) {\n        polygon = this._newPolygon(points, stackedOnPoints);\n      } // NOTE: Must update _endLabel before setClipPath.\n\n\n      if (!isCoordSysPolar) {\n        this._initOrUpdateEndLabel(seriesModel, coordSys, convertToColorString(visualColor));\n      }\n\n      lineGroup.setClipPath(createLineClipPath(this, coordSys, true, seriesModel));\n    } else {\n      if (isAreaChart && !polygon) {\n        // If areaStyle is added\n        polygon = this._newPolygon(points, stackedOnPoints);\n      } else if (polygon && !isAreaChart) {\n        // If areaStyle is removed\n        lineGroup.remove(polygon);\n        polygon = this._polygon = null;\n      } // NOTE: Must update _endLabel before setClipPath.\n\n\n      if (!isCoordSysPolar) {\n        this._initOrUpdateEndLabel(seriesModel, coordSys, convertToColorString(visualColor));\n      } // Update clipPath\n\n\n      var oldClipPath = lineGroup.getClipPath();\n\n      if (oldClipPath) {\n        var newClipPath = createLineClipPath(this, coordSys, false, seriesModel);\n        graphic.initProps(oldClipPath, {\n          shape: newClipPath.shape\n        }, seriesModel);\n      } else {\n        lineGroup.setClipPath(createLineClipPath(this, coordSys, true, seriesModel));\n      } // Always update, or it is wrong in the case turning on legend\n      // because points are not changed\n\n\n      showSymbol && symbolDraw.updateData(data, {\n        isIgnore: isIgnoreFunc,\n        clipShape: clipShapeForSymbol,\n        disableAnimation: true,\n        getSymbolPoint: function (idx) {\n          return [points[idx * 2], points[idx * 2 + 1]];\n        }\n      }); // In the case data zoom triggerred refreshing frequently\n      // Data may not change if line has a category axis. So it should animate nothing\n\n      if (!isPointsSame(this._stackedOnPoints, stackedOnPoints) || !isPointsSame(this._points, points)) {\n        if (hasAnimation) {\n          this._doUpdateAnimation(data, stackedOnPoints, coordSys, api, step, valueOrigin);\n        } else {\n          // Not do it in update with animation\n          if (step) {\n            // TODO If stacked series is not step\n            points = turnPointsIntoStep(points, coordSys, step);\n\n            if (stackedOnPoints) {\n              stackedOnPoints = turnPointsIntoStep(stackedOnPoints, coordSys, step);\n            }\n          }\n\n          polyline.setShape({\n            points: points\n          });\n          polygon && polygon.setShape({\n            points: points,\n            stackedOnPoints: stackedOnPoints\n          });\n        }\n      }\n    }\n\n    var focus = seriesModel.get(['emphasis', 'focus']);\n    var blurScope = seriesModel.get(['emphasis', 'blurScope']);\n    polyline.useStyle(zrUtil.defaults( // Use color in lineStyle first\n    lineStyleModel.getLineStyle(), {\n      fill: 'none',\n      stroke: visualColor,\n      lineJoin: 'bevel'\n    }));\n    setStatesStylesFromModel(polyline, seriesModel, 'lineStyle');\n\n    if (polyline.style.lineWidth > 0 && seriesModel.get(['emphasis', 'lineStyle', 'width']) === 'bolder') {\n      var emphasisLineStyle = polyline.getState('emphasis').style;\n      emphasisLineStyle.lineWidth = +polyline.style.lineWidth + 1;\n    } // Needs seriesIndex for focus\n\n\n    getECData(polyline).seriesIndex = seriesModel.seriesIndex;\n    enableHoverEmphasis(polyline, focus, blurScope);\n    var smooth = getSmooth(seriesModel.get('smooth'));\n    var smoothMonotone = seriesModel.get('smoothMonotone');\n    var connectNulls = seriesModel.get('connectNulls');\n    polyline.setShape({\n      smooth: smooth,\n      smoothMonotone: smoothMonotone,\n      connectNulls: connectNulls\n    });\n\n    if (polygon) {\n      var stackedOnSeries = data.getCalculationInfo('stackedOnSeries');\n      var stackedOnSmooth = 0;\n      polygon.useStyle(zrUtil.defaults(areaStyleModel.getAreaStyle(), {\n        fill: visualColor,\n        opacity: 0.7,\n        lineJoin: 'bevel',\n        decal: data.getVisual('style').decal\n      }));\n\n      if (stackedOnSeries) {\n        stackedOnSmooth = getSmooth(stackedOnSeries.get('smooth'));\n      }\n\n      polygon.setShape({\n        smooth: smooth,\n        stackedOnSmooth: stackedOnSmooth,\n        smoothMonotone: smoothMonotone,\n        connectNulls: connectNulls\n      });\n      setStatesStylesFromModel(polygon, seriesModel, 'areaStyle'); // Needs seriesIndex for focus\n\n      getECData(polygon).seriesIndex = seriesModel.seriesIndex;\n      enableHoverEmphasis(polygon, focus, blurScope);\n    }\n\n    var changePolyState = function (toState) {\n      _this._changePolyState(toState);\n    };\n\n    data.eachItemGraphicEl(function (el) {\n      // Switch polyline / polygon state if element changed its state.\n      el && (el.onHoverStateChange = changePolyState);\n    });\n    this._polyline.onHoverStateChange = changePolyState;\n    this._data = data; // Save the coordinate system for transition animation when data changed\n\n    this._coordSys = coordSys;\n    this._stackedOnPoints = stackedOnPoints;\n    this._points = points;\n    this._step = step;\n    this._valueOrigin = valueOrigin;\n\n    if (seriesModel.get('triggerLineEvent')) {\n      this.packEventData(seriesModel, polyline);\n      polygon && this.packEventData(seriesModel, polygon);\n    }\n  };\n\n  LineView.prototype.packEventData = function (seriesModel, el) {\n    getECData(el).eventData = {\n      componentType: 'series',\n      componentSubType: 'line',\n      componentIndex: seriesModel.componentIndex,\n      seriesIndex: seriesModel.seriesIndex,\n      seriesName: seriesModel.name,\n      seriesType: 'line'\n    };\n  };\n\n  LineView.prototype.highlight = function (seriesModel, ecModel, api, payload) {\n    var data = seriesModel.getData();\n    var dataIndex = modelUtil.queryDataIndex(data, payload);\n\n    this._changePolyState('emphasis');\n\n    if (!(dataIndex instanceof Array) && dataIndex != null && dataIndex >= 0) {\n      var points = data.getLayout('points');\n      var symbol = data.getItemGraphicEl(dataIndex);\n\n      if (!symbol) {\n        // Create a temporary symbol if it is not exists\n        var x = points[dataIndex * 2];\n        var y = points[dataIndex * 2 + 1];\n\n        if (isNaN(x) || isNaN(y)) {\n          // Null data\n          return;\n        } // fix #11360: should't draw symbol outside clipShapeForSymbol\n\n\n        if (this._clipShapeForSymbol && !this._clipShapeForSymbol.contain(x, y)) {\n          return;\n        }\n\n        var zlevel = seriesModel.get('zlevel');\n        var z = seriesModel.get('z');\n        symbol = new SymbolClz(data, dataIndex);\n        symbol.x = x;\n        symbol.y = y;\n        symbol.setZ(zlevel, z); // ensure label text of the temporary symbol is in front of line and area polygon\n\n        var symbolLabel = symbol.getSymbolPath().getTextContent();\n\n        if (symbolLabel) {\n          symbolLabel.zlevel = zlevel;\n          symbolLabel.z = z;\n          symbolLabel.z2 = this._polyline.z2 + 1;\n        }\n\n        symbol.__temp = true;\n        data.setItemGraphicEl(dataIndex, symbol); // Stop scale animation\n\n        symbol.stopSymbolAnimation(true);\n        this.group.add(symbol);\n      }\n\n      symbol.highlight();\n    } else {\n      // Highlight whole series\n      ChartView.prototype.highlight.call(this, seriesModel, ecModel, api, payload);\n    }\n  };\n\n  LineView.prototype.downplay = function (seriesModel, ecModel, api, payload) {\n    var data = seriesModel.getData();\n    var dataIndex = modelUtil.queryDataIndex(data, payload);\n\n    this._changePolyState('normal');\n\n    if (dataIndex != null && dataIndex >= 0) {\n      var symbol = data.getItemGraphicEl(dataIndex);\n\n      if (symbol) {\n        if (symbol.__temp) {\n          data.setItemGraphicEl(dataIndex, null);\n          this.group.remove(symbol);\n        } else {\n          symbol.downplay();\n        }\n      }\n    } else {\n      // FIXME\n      // can not downplay completely.\n      // Downplay whole series\n      ChartView.prototype.downplay.call(this, seriesModel, ecModel, api, payload);\n    }\n  };\n\n  LineView.prototype._changePolyState = function (toState) {\n    var polygon = this._polygon;\n    setStatesFlag(this._polyline, toState);\n    polygon && setStatesFlag(polygon, toState);\n  };\n\n  LineView.prototype._newPolyline = function (points) {\n    var polyline = this._polyline; // Remove previous created polyline\n\n    if (polyline) {\n      this._lineGroup.remove(polyline);\n    }\n\n    polyline = new ECPolyline({\n      shape: {\n        points: points\n      },\n      segmentIgnoreThreshold: 2,\n      z2: 10\n    });\n\n    this._lineGroup.add(polyline);\n\n    this._polyline = polyline;\n    return polyline;\n  };\n\n  LineView.prototype._newPolygon = function (points, stackedOnPoints) {\n    var polygon = this._polygon; // Remove previous created polygon\n\n    if (polygon) {\n      this._lineGroup.remove(polygon);\n    }\n\n    polygon = new ECPolygon({\n      shape: {\n        points: points,\n        stackedOnPoints: stackedOnPoints\n      },\n      segmentIgnoreThreshold: 2\n    });\n\n    this._lineGroup.add(polygon);\n\n    this._polygon = polygon;\n    return polygon;\n  };\n\n  LineView.prototype._initSymbolLabelAnimation = function (data, coordSys, clipShape) {\n    var isHorizontalOrRadial;\n    var isCoordSysPolar;\n    var baseAxis = coordSys.getBaseAxis();\n    var isAxisInverse = baseAxis.inverse;\n\n    if (coordSys.type === 'cartesian2d') {\n      isHorizontalOrRadial = baseAxis.isHorizontal();\n      isCoordSysPolar = false;\n    } else if (coordSys.type === 'polar') {\n      isHorizontalOrRadial = baseAxis.dim === 'angle';\n      isCoordSysPolar = true;\n    }\n\n    var seriesModel = data.hostModel;\n    var seriesDuration = seriesModel.get('animationDuration');\n\n    if (typeof seriesDuration === 'function') {\n      seriesDuration = seriesDuration(null);\n    }\n\n    var seriesDalay = seriesModel.get('animationDelay') || 0;\n    var seriesDalayValue = typeof seriesDalay === 'function' ? seriesDalay(null) : seriesDalay;\n    data.eachItemGraphicEl(function (symbol, idx) {\n      var el = symbol;\n\n      if (el) {\n        var point = [symbol.x, symbol.y];\n        var start = void 0;\n        var end = void 0;\n        var current = void 0;\n\n        if (clipShape) {\n          if (isCoordSysPolar) {\n            var polarClip = clipShape;\n            var coord = coordSys.pointToCoord(point);\n\n            if (isHorizontalOrRadial) {\n              start = polarClip.startAngle;\n              end = polarClip.endAngle;\n              current = -coord[1] / 180 * Math.PI;\n            } else {\n              start = polarClip.r0;\n              end = polarClip.r;\n              current = coord[0];\n            }\n          } else {\n            var gridClip = clipShape;\n\n            if (isHorizontalOrRadial) {\n              start = gridClip.x;\n              end = gridClip.x + gridClip.width;\n              current = symbol.x;\n            } else {\n              start = gridClip.y + gridClip.height;\n              end = gridClip.y;\n              current = symbol.y;\n            }\n          }\n        }\n\n        var ratio = end === start ? 0 : (current - start) / (end - start);\n\n        if (isAxisInverse) {\n          ratio = 1 - ratio;\n        }\n\n        var delay = typeof seriesDalay === 'function' ? seriesDalay(idx) : seriesDuration * ratio + seriesDalayValue;\n        var symbolPath = el.getSymbolPath();\n        var text = symbolPath.getTextContent();\n        el.attr({\n          scaleX: 0,\n          scaleY: 0\n        });\n        el.animateTo({\n          scaleX: 1,\n          scaleY: 1\n        }, {\n          duration: 200,\n          setToFinal: true,\n          delay: delay\n        });\n\n        if (text) {\n          text.animateFrom({\n            style: {\n              opacity: 0\n            }\n          }, {\n            duration: 300,\n            delay: delay\n          });\n        }\n\n        symbolPath.disableLabelAnimation = true;\n      }\n    });\n  };\n\n  LineView.prototype._initOrUpdateEndLabel = function (seriesModel, coordSys, inheritColor) {\n    var endLabelModel = seriesModel.getModel('endLabel');\n\n    if (anyStateShowEndLabel(seriesModel)) {\n      var data_2 = seriesModel.getData();\n      var polyline = this._polyline;\n      var endLabel = this._endLabel;\n\n      if (!endLabel) {\n        endLabel = this._endLabel = new graphic.Text({\n          z2: 200 // should be higher than item symbol\n\n        });\n        endLabel.ignoreClip = true;\n        polyline.setTextContent(this._endLabel);\n        polyline.disableLabelAnimation = true;\n      } // Find last non-NaN data to display data\n\n\n      var dataIndex = getLastIndexNotNull(data_2.getLayout('points'));\n\n      if (dataIndex >= 0) {\n        setLabelStyle(polyline, getLabelStatesModels(seriesModel, 'endLabel'), {\n          inheritColor: inheritColor,\n          labelFetcher: seriesModel,\n          labelDataIndex: dataIndex,\n          defaultText: function (dataIndex, opt, interpolatedValue) {\n            return interpolatedValue != null ? getDefaultInterpolatedLabel(data_2, interpolatedValue) : getDefaultLabel(data_2, dataIndex);\n          },\n          enableTextSetter: true\n        }, getEndLabelStateSpecified(endLabelModel, coordSys));\n        polyline.textConfig.position = null;\n      }\n    } else if (this._endLabel) {\n      this._polyline.removeTextContent();\n\n      this._endLabel = null;\n    }\n  };\n\n  LineView.prototype._endLabelOnDuring = function (percent, clipRect, data, animationRecord, valueAnimation, endLabelModel, coordSys) {\n    var endLabel = this._endLabel;\n    var polyline = this._polyline;\n\n    if (endLabel) {\n      // NOTE: Don't remove percent < 1. percent === 1 means the first frame during render.\n      // The label is not prepared at this time.\n      if (percent < 1 && animationRecord.originalX == null) {\n        animationRecord.originalX = endLabel.x;\n        animationRecord.originalY = endLabel.y;\n      }\n\n      var points = data.getLayout('points');\n      var seriesModel = data.hostModel;\n      var connectNulls = seriesModel.get('connectNulls');\n      var precision = endLabelModel.get('precision');\n      var distance = endLabelModel.get('distance') || 0;\n      var baseAxis = coordSys.getBaseAxis();\n      var isHorizontal = baseAxis.isHorizontal();\n      var isBaseInversed = baseAxis.inverse;\n      var clipShape = clipRect.shape;\n      var xOrY = isBaseInversed ? isHorizontal ? clipShape.x : clipShape.y + clipShape.height : isHorizontal ? clipShape.x + clipShape.width : clipShape.y;\n      var distanceX = (isHorizontal ? distance : 0) * (isBaseInversed ? -1 : 1);\n      var distanceY = (isHorizontal ? 0 : -distance) * (isBaseInversed ? -1 : 1);\n      var dim = isHorizontal ? 'x' : 'y';\n      var dataIndexRange = getIndexRange(points, xOrY, dim);\n      var indices = dataIndexRange.range;\n      var diff = indices[1] - indices[0];\n      var value = void 0;\n\n      if (diff >= 1) {\n        // diff > 1 && connectNulls, which is on the null data.\n        if (diff > 1 && !connectNulls) {\n          var pt = getPointAtIndex(points, indices[0]);\n          endLabel.attr({\n            x: pt[0] + distanceX,\n            y: pt[1] + distanceY\n          });\n          valueAnimation && (value = seriesModel.getRawValue(indices[0]));\n        } else {\n          var pt = polyline.getPointOn(xOrY, dim);\n          pt && endLabel.attr({\n            x: pt[0] + distanceX,\n            y: pt[1] + distanceY\n          });\n          var startValue = seriesModel.getRawValue(indices[0]);\n          var endValue = seriesModel.getRawValue(indices[1]);\n          valueAnimation && (value = modelUtil.interpolateRawValues(data, precision, startValue, endValue, dataIndexRange.t));\n        }\n\n        animationRecord.lastFrameIndex = indices[0];\n      } else {\n        // If diff <= 0, which is the range is not found(Include NaN)\n        // Choose the first point or last point.\n        var idx = percent === 1 || animationRecord.lastFrameIndex > 0 ? indices[0] : 0;\n        var pt = getPointAtIndex(points, idx);\n        valueAnimation && (value = seriesModel.getRawValue(idx));\n        endLabel.attr({\n          x: pt[0] + distanceX,\n          y: pt[1] + distanceY\n        });\n      }\n\n      if (valueAnimation) {\n        labelInner(endLabel).setLabelText(value);\n      }\n    }\n  };\n  /**\n   * @private\n   */\n  // FIXME Two value axis\n\n\n  LineView.prototype._doUpdateAnimation = function (data, stackedOnPoints, coordSys, api, step, valueOrigin) {\n    var polyline = this._polyline;\n    var polygon = this._polygon;\n    var seriesModel = data.hostModel;\n    var diff = lineAnimationDiff(this._data, data, this._stackedOnPoints, stackedOnPoints, this._coordSys, coordSys, this._valueOrigin, valueOrigin);\n    var current = diff.current;\n    var stackedOnCurrent = diff.stackedOnCurrent;\n    var next = diff.next;\n    var stackedOnNext = diff.stackedOnNext;\n\n    if (step) {\n      // TODO If stacked series is not step\n      current = turnPointsIntoStep(diff.current, coordSys, step);\n      stackedOnCurrent = turnPointsIntoStep(diff.stackedOnCurrent, coordSys, step);\n      next = turnPointsIntoStep(diff.next, coordSys, step);\n      stackedOnNext = turnPointsIntoStep(diff.stackedOnNext, coordSys, step);\n    } // Don't apply animation if diff is large.\n    // For better result and avoid memory explosion problems like\n    // https://github.com/apache/incubator-echarts/issues/12229\n\n\n    if (getBoundingDiff(current, next) > 3000 || polygon && getBoundingDiff(stackedOnCurrent, stackedOnNext) > 3000) {\n      polyline.stopAnimation();\n      polyline.setShape({\n        points: next\n      });\n\n      if (polygon) {\n        polygon.stopAnimation();\n        polygon.setShape({\n          points: next,\n          stackedOnPoints: stackedOnNext\n        });\n      }\n\n      return;\n    }\n\n    polyline.shape.__points = diff.current;\n    polyline.shape.points = current;\n    var target = {\n      shape: {\n        points: next\n      }\n    }; // Also animate the original points.\n    // If points reference is changed when turning into step line.\n\n    if (diff.current !== current) {\n      target.shape.__points = diff.next;\n    } // Stop previous animation.\n\n\n    polyline.stopAnimation();\n    graphic.updateProps(polyline, target, seriesModel);\n\n    if (polygon) {\n      polygon.setShape({\n        // Reuse the points with polyline.\n        points: current,\n        stackedOnPoints: stackedOnCurrent\n      });\n      polygon.stopAnimation();\n      graphic.updateProps(polygon, {\n        shape: {\n          stackedOnPoints: stackedOnNext\n        }\n      }, seriesModel); // If use attr directly in updateProps.\n\n      if (polyline.shape.points !== polygon.shape.points) {\n        polygon.shape.points = polyline.shape.points;\n      }\n    }\n\n    var updatedDataInfo = [];\n    var diffStatus = diff.status;\n\n    for (var i = 0; i < diffStatus.length; i++) {\n      var cmd = diffStatus[i].cmd;\n\n      if (cmd === '=') {\n        var el = data.getItemGraphicEl(diffStatus[i].idx1);\n\n        if (el) {\n          updatedDataInfo.push({\n            el: el,\n            ptIdx: i // Index of points\n\n          });\n        }\n      }\n    }\n\n    if (polyline.animators && polyline.animators.length) {\n      polyline.animators[0].during(function () {\n        polygon && polygon.dirtyShape();\n        var points = polyline.shape.__points;\n\n        for (var i = 0; i < updatedDataInfo.length; i++) {\n          var el = updatedDataInfo[i].el;\n          var offset = updatedDataInfo[i].ptIdx * 2;\n          el.x = points[offset];\n          el.y = points[offset + 1];\n          el.markRedraw();\n        }\n      });\n    }\n  };\n\n  LineView.prototype.remove = function (ecModel) {\n    var group = this.group;\n    var oldData = this._data;\n\n    this._lineGroup.removeAll();\n\n    this._symbolDraw.remove(true); // Remove temporary created elements when highlighting\n\n\n    oldData && oldData.eachItemGraphicEl(function (el, idx) {\n      if (el.__temp) {\n        group.remove(el);\n        oldData.setItemGraphicEl(idx, null);\n      }\n    });\n    this._polyline = this._polygon = this._coordSys = this._points = this._stackedOnPoints = this._endLabel = this._data = null;\n  };\n\n  LineView.type = 'line';\n  return LineView;\n}(ChartView);\n\nexport default LineView;","map":{"version":3,"sources":["D:/前端项目/尚阳互动官网/official-website/node_modules/echarts/lib/chart/line/LineView.js"],"names":["__extends","zrUtil","SymbolDraw","SymbolClz","lineAnimationDiff","graphic","modelUtil","ECPolyline","ECPolygon","ChartView","prepareDataCoordInfo","getStackedOnPoint","createGridClipPath","createPolarClipPath","isCoordinateSystemType","setStatesStylesFromModel","setStatesFlag","enableHoverEmphasis","SPECIAL_STATES","setLabelStyle","getLabelStatesModels","labelInner","getDefaultLabel","getDefaultInterpolatedLabel","getECData","createFloat32Array","convertToColorString","lerp","isPointsSame","points1","points2","length","i","bboxFromPoints","points","minX","Infinity","minY","maxX","maxY","x","y","isNaN","Math","min","max","getBoundingDiff","_a","min1","max1","_b","min2","max2","abs","getSmooth","smooth","getStackedOnPoints","coordSys","data","dataCoordInfo","valueDim","len","count","idx","pt","turnPointsIntoStep","stepTurnAt","baseAxis","getBaseAxis","baseIndex","dim","stepPoints","stepPt","nextPt","push","middle","stepPt2","clipColorStops","colorStops","maxSize","newColorStops","prevOutOfRangeColorStop","prevInRangeColorStop","lerpStop","stop0","stop1","clippedCoord","coord0","coord","p","color","stop_1","getVisualGradient","api","visualMetaList","getVisual","type","process","env","NODE_ENV","console","warn","coordDim","visualMeta","dimInfo","getDimensionInfo","dimension","axis","getAxis","map","stops","stop","toGlobalCoord","dataToCoord","value","stopLen","outerColors","slice","reverse","colorStopsInRange","getWidth","getHeight","inRangeStopLen","tinyExtent","minCoord","maxCoord","coordSpan","each","offset","unshift","gradient","LinearGradient","getIsIgnoreFunc","seriesModel","showAllSymbol","get","isAuto","categoryAxis","getAxesByScale","canShowAllSymbolForCategory","categoryDataDim","mapDimension","labelMap","getViewLabels","labelItem","ordinalNumber","scale","getRawOrdinalNumber","tickValue","dataIndex","hasOwnProperty","axisExtent","getExtent","availSize","dataLen","step","round","getSymbolSize","isHorizontal","isPointNull","getLastIndexNotNull","getPointAtIndex","getIndexRange","xOrY","dimIdx","a","b","prevIndex","nextIndex","range","t","anyStateShowEndLabel","createLineClipPath","lineView","hasAnimation","endLabelModel_1","getModel","valueAnimation_1","data_1","getData","labelAnimationRecord_1","lastFrameIndex","during","percent","clipRect","_endLabelOnDuring","clipPath","endLabel","_endLabel","originalX","attr","originalY","rectShape","shape","expandSize","width","height","getEndLabelStateSpecified","endLabelModel","isBaseInversed","inverse","align","verticalAlign","normal","LineView","_super","apply","arguments","prototype","init","lineGroup","Group","symbolDraw","group","add","_symbolDraw","_lineGroup","render","ecModel","_this","coordinateSystem","lineStyleModel","areaStyleModel","getLayout","isCoordSysPolar","prevCoordSys","_coordSys","polyline","_polyline","polygon","_polygon","isAreaChart","isEmpty","valueOrigin","stackedOnPoints","showSymbol","isIgnoreFunc","oldData","_data","eachItemGraphicEl","el","__temp","remove","setItemGraphicEl","clipShapeForSymbol","getArea","r0","r","_clipShapeForSymbol","visualColor","_step","updateData","isIgnore","clipShape","disableAnimation","getSymbolPoint","_initSymbolLabelAnimation","_newPolyline","_newPolygon","_initOrUpdateEndLabel","setClipPath","oldClipPath","getClipPath","newClipPath","initProps","_stackedOnPoints","_points","_doUpdateAnimation","setShape","focus","blurScope","useStyle","defaults","getLineStyle","fill","stroke","lineJoin","style","lineWidth","emphasisLineStyle","getState","seriesIndex","smoothMonotone","connectNulls","stackedOnSeries","getCalculationInfo","stackedOnSmooth","getAreaStyle","opacity","decal","changePolyState","toState","_changePolyState","onHoverStateChange","_valueOrigin","packEventData","eventData","componentType","componentSubType","componentIndex","seriesName","name","seriesType","highlight","payload","queryDataIndex","Array","symbol","getItemGraphicEl","contain","zlevel","z","setZ","symbolLabel","getSymbolPath","getTextContent","z2","stopSymbolAnimation","call","downplay","segmentIgnoreThreshold","isHorizontalOrRadial","isAxisInverse","hostModel","seriesDuration","seriesDalay","seriesDalayValue","point","start","end","current","polarClip","pointToCoord","startAngle","endAngle","PI","gridClip","ratio","delay","symbolPath","text","scaleX","scaleY","animateTo","duration","setToFinal","animateFrom","disableLabelAnimation","inheritColor","data_2","Text","ignoreClip","setTextContent","labelFetcher","labelDataIndex","defaultText","opt","interpolatedValue","enableTextSetter","textConfig","position","removeTextContent","animationRecord","valueAnimation","precision","distance","distanceX","distanceY","dataIndexRange","indices","diff","getRawValue","getPointOn","startValue","endValue","interpolateRawValues","setLabelText","stackedOnCurrent","next","stackedOnNext","stopAnimation","__points","target","updateProps","updatedDataInfo","diffStatus","status","cmd","idx1","ptIdx","animators","dirtyShape","markRedraw","removeAll"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\"; // FIXME step not support polar\n\nimport * as zrUtil from 'zrender/lib/core/util';\nimport SymbolDraw from '../helper/SymbolDraw';\nimport SymbolClz from '../helper/Symbol';\nimport lineAnimationDiff from './lineAnimationDiff';\nimport * as graphic from '../../util/graphic';\nimport * as modelUtil from '../../util/model';\nimport { ECPolyline, ECPolygon } from './poly';\nimport ChartView from '../../view/Chart';\nimport { prepareDataCoordInfo, getStackedOnPoint } from './helper';\nimport { createGridClipPath, createPolarClipPath } from '../helper/createClipPathFromCoordSys';\nimport { isCoordinateSystemType } from '../../coord/CoordinateSystem';\nimport { setStatesStylesFromModel, setStatesFlag, enableHoverEmphasis, SPECIAL_STATES } from '../../util/states';\nimport { setLabelStyle, getLabelStatesModels, labelInner } from '../../label/labelStyle';\nimport { getDefaultLabel, getDefaultInterpolatedLabel } from '../helper/labelHelper';\nimport { getECData } from '../../util/innerStore';\nimport { createFloat32Array } from '../../util/vendor';\nimport { convertToColorString } from '../../util/format';\nimport { lerp } from 'zrender/lib/tool/color';\n\nfunction isPointsSame(points1, points2) {\n  if (points1.length !== points2.length) {\n    return;\n  }\n\n  for (var i = 0; i < points1.length; i++) {\n    if (points1[i] !== points2[i]) {\n      return;\n    }\n  }\n\n  return true;\n}\n\nfunction bboxFromPoints(points) {\n  var minX = Infinity;\n  var minY = Infinity;\n  var maxX = -Infinity;\n  var maxY = -Infinity;\n\n  for (var i = 0; i < points.length;) {\n    var x = points[i++];\n    var y = points[i++];\n\n    if (!isNaN(x)) {\n      minX = Math.min(x, minX);\n      maxX = Math.max(x, maxX);\n    }\n\n    if (!isNaN(y)) {\n      minY = Math.min(y, minY);\n      maxY = Math.max(y, maxY);\n    }\n  }\n\n  return [[minX, minY], [maxX, maxY]];\n}\n\nfunction getBoundingDiff(points1, points2) {\n  var _a = bboxFromPoints(points1),\n      min1 = _a[0],\n      max1 = _a[1];\n\n  var _b = bboxFromPoints(points2),\n      min2 = _b[0],\n      max2 = _b[1]; // Get a max value from each corner of two boundings.\n\n\n  return Math.max(Math.abs(min1[0] - min2[0]), Math.abs(min1[1] - min2[1]), Math.abs(max1[0] - max2[0]), Math.abs(max1[1] - max2[1]));\n}\n\nfunction getSmooth(smooth) {\n  return typeof smooth === 'number' ? smooth : smooth ? 0.5 : 0;\n}\n\nfunction getStackedOnPoints(coordSys, data, dataCoordInfo) {\n  if (!dataCoordInfo.valueDim) {\n    return [];\n  }\n\n  var len = data.count();\n  var points = createFloat32Array(len * 2);\n\n  for (var idx = 0; idx < len; idx++) {\n    var pt = getStackedOnPoint(dataCoordInfo, coordSys, data, idx);\n    points[idx * 2] = pt[0];\n    points[idx * 2 + 1] = pt[1];\n  }\n\n  return points;\n}\n\nfunction turnPointsIntoStep(points, coordSys, stepTurnAt) {\n  var baseAxis = coordSys.getBaseAxis();\n  var baseIndex = baseAxis.dim === 'x' || baseAxis.dim === 'radius' ? 0 : 1;\n  var stepPoints = [];\n  var i = 0;\n  var stepPt = [];\n  var pt = [];\n  var nextPt = [];\n\n  for (; i < points.length - 2; i += 2) {\n    nextPt[0] = points[i + 2];\n    nextPt[1] = points[i + 3];\n    pt[0] = points[i];\n    pt[1] = points[i + 1];\n    stepPoints.push(pt[0], pt[1]);\n\n    switch (stepTurnAt) {\n      case 'end':\n        stepPt[baseIndex] = nextPt[baseIndex];\n        stepPt[1 - baseIndex] = pt[1 - baseIndex];\n        stepPoints.push(stepPt[0], stepPt[1]);\n        break;\n\n      case 'middle':\n        var middle = (pt[baseIndex] + nextPt[baseIndex]) / 2;\n        var stepPt2 = [];\n        stepPt[baseIndex] = stepPt2[baseIndex] = middle;\n        stepPt[1 - baseIndex] = pt[1 - baseIndex];\n        stepPt2[1 - baseIndex] = nextPt[1 - baseIndex];\n        stepPoints.push(stepPt[0], stepPt[1]);\n        stepPoints.push(stepPt2[0], stepPt2[1]);\n        break;\n\n      default:\n        // default is start\n        stepPt[baseIndex] = pt[baseIndex];\n        stepPt[1 - baseIndex] = nextPt[1 - baseIndex];\n        stepPoints.push(stepPt[0], stepPt[1]);\n    }\n  } // Last points\n\n\n  stepPoints.push(points[i++], points[i++]);\n  return stepPoints;\n}\n/**\n * Clip color stops to edge. Avoid creating too large gradients.\n * Which may lead to blurry when GPU acceleration is enabled. See #15680\n *\n * The stops has been sorted from small to large.\n */\n\n\nfunction clipColorStops(colorStops, maxSize) {\n  var newColorStops = [];\n  var len = colorStops.length; // coord will always < 0 in prevOutOfRangeColorStop.\n\n  var prevOutOfRangeColorStop;\n  var prevInRangeColorStop;\n\n  function lerpStop(stop0, stop1, clippedCoord) {\n    var coord0 = stop0.coord;\n    var p = (clippedCoord - coord0) / (stop1.coord - coord0);\n    var color = lerp(p, [stop0.color, stop1.color]);\n    return {\n      coord: clippedCoord,\n      color: color\n    };\n  }\n\n  for (var i = 0; i < len; i++) {\n    var stop_1 = colorStops[i];\n    var coord = stop_1.coord;\n\n    if (coord < 0) {\n      prevOutOfRangeColorStop = stop_1;\n    } else if (coord > maxSize) {\n      if (prevInRangeColorStop) {\n        newColorStops.push(lerpStop(prevInRangeColorStop, stop_1, maxSize));\n      } else if (prevOutOfRangeColorStop) {\n        // If there are two stops and coord range is between these two stops\n        newColorStops.push(lerpStop(prevOutOfRangeColorStop, stop_1, 0), lerpStop(prevOutOfRangeColorStop, stop_1, maxSize));\n      } // All following stop will be out of range. So just ignore them.\n\n\n      break;\n    } else {\n      if (prevOutOfRangeColorStop) {\n        newColorStops.push(lerpStop(prevOutOfRangeColorStop, stop_1, 0)); // Reset\n\n        prevOutOfRangeColorStop = null;\n      }\n\n      newColorStops.push(stop_1);\n      prevInRangeColorStop = stop_1;\n    }\n  }\n\n  return newColorStops;\n}\n\nfunction getVisualGradient(data, coordSys, api) {\n  var visualMetaList = data.getVisual('visualMeta');\n\n  if (!visualMetaList || !visualMetaList.length || !data.count()) {\n    // When data.count() is 0, gradient range can not be calculated.\n    return;\n  }\n\n  if (coordSys.type !== 'cartesian2d') {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn('Visual map on line style is only supported on cartesian2d.');\n    }\n\n    return;\n  }\n\n  var coordDim;\n  var visualMeta;\n\n  for (var i = visualMetaList.length - 1; i >= 0; i--) {\n    var dimInfo = data.getDimensionInfo(visualMetaList[i].dimension);\n    coordDim = dimInfo && dimInfo.coordDim; // Can only be x or y\n\n    if (coordDim === 'x' || coordDim === 'y') {\n      visualMeta = visualMetaList[i];\n      break;\n    }\n  }\n\n  if (!visualMeta) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn('Visual map on line style only support x or y dimension.');\n    }\n\n    return;\n  } // If the area to be rendered is bigger than area defined by LinearGradient,\n  // the canvas spec prescribes that the color of the first stop and the last\n  // stop should be used. But if two stops are added at offset 0, in effect\n  // browsers use the color of the second stop to render area outside\n  // LinearGradient. So we can only infinitesimally extend area defined in\n  // LinearGradient to render `outerColors`.\n\n\n  var axis = coordSys.getAxis(coordDim); // dataToCoord mapping may not be linear, but must be monotonic.\n\n  var colorStops = zrUtil.map(visualMeta.stops, function (stop) {\n    // offset will be calculated later.\n    return {\n      coord: axis.toGlobalCoord(axis.dataToCoord(stop.value)),\n      color: stop.color\n    };\n  });\n  var stopLen = colorStops.length;\n  var outerColors = visualMeta.outerColors.slice();\n\n  if (stopLen && colorStops[0].coord > colorStops[stopLen - 1].coord) {\n    colorStops.reverse();\n    outerColors.reverse();\n  }\n\n  var colorStopsInRange = clipColorStops(colorStops, coordDim === 'x' ? api.getWidth() : api.getHeight());\n  var inRangeStopLen = colorStopsInRange.length;\n\n  if (!inRangeStopLen && stopLen) {\n    // All stops are out of range. All will be the same color.\n    return colorStops[0].coord < 0 ? outerColors[1] ? outerColors[1] : colorStops[stopLen - 1].color : outerColors[0] ? outerColors[0] : colorStops[0].color;\n  }\n\n  var tinyExtent = 10; // Arbitrary value: 10px\n\n  var minCoord = colorStopsInRange[0].coord - tinyExtent;\n  var maxCoord = colorStopsInRange[inRangeStopLen - 1].coord + tinyExtent;\n  var coordSpan = maxCoord - minCoord;\n\n  if (coordSpan < 1e-3) {\n    return 'transparent';\n  }\n\n  zrUtil.each(colorStopsInRange, function (stop) {\n    stop.offset = (stop.coord - minCoord) / coordSpan;\n  });\n  colorStopsInRange.push({\n    // NOTE: inRangeStopLen may still be 0 if stoplen is zero.\n    offset: inRangeStopLen ? colorStopsInRange[inRangeStopLen - 1].offset : 0.5,\n    color: outerColors[1] || 'transparent'\n  });\n  colorStopsInRange.unshift({\n    offset: inRangeStopLen ? colorStopsInRange[0].offset : 0.5,\n    color: outerColors[0] || 'transparent'\n  });\n  var gradient = new graphic.LinearGradient(0, 0, 0, 0, colorStopsInRange, true);\n  gradient[coordDim] = minCoord;\n  gradient[coordDim + '2'] = maxCoord;\n  return gradient;\n}\n\nfunction getIsIgnoreFunc(seriesModel, data, coordSys) {\n  var showAllSymbol = seriesModel.get('showAllSymbol');\n  var isAuto = showAllSymbol === 'auto';\n\n  if (showAllSymbol && !isAuto) {\n    return;\n  }\n\n  var categoryAxis = coordSys.getAxesByScale('ordinal')[0];\n\n  if (!categoryAxis) {\n    return;\n  } // Note that category label interval strategy might bring some weird effect\n  // in some scenario: users may wonder why some of the symbols are not\n  // displayed. So we show all symbols as possible as we can.\n\n\n  if (isAuto // Simplify the logic, do not determine label overlap here.\n  && canShowAllSymbolForCategory(categoryAxis, data)) {\n    return;\n  } // Otherwise follow the label interval strategy on category axis.\n\n\n  var categoryDataDim = data.mapDimension(categoryAxis.dim);\n  var labelMap = {};\n  zrUtil.each(categoryAxis.getViewLabels(), function (labelItem) {\n    var ordinalNumber = categoryAxis.scale.getRawOrdinalNumber(labelItem.tickValue);\n    labelMap[ordinalNumber] = 1;\n  });\n  return function (dataIndex) {\n    return !labelMap.hasOwnProperty(data.get(categoryDataDim, dataIndex));\n  };\n}\n\nfunction canShowAllSymbolForCategory(categoryAxis, data) {\n  // In mose cases, line is monotonous on category axis, and the label size\n  // is close with each other. So we check the symbol size and some of the\n  // label size alone with the category axis to estimate whether all symbol\n  // can be shown without overlap.\n  var axisExtent = categoryAxis.getExtent();\n  var availSize = Math.abs(axisExtent[1] - axisExtent[0]) / categoryAxis.scale.count();\n  isNaN(availSize) && (availSize = 0); // 0/0 is NaN.\n  // Sampling some points, max 5.\n\n  var dataLen = data.count();\n  var step = Math.max(1, Math.round(dataLen / 5));\n\n  for (var dataIndex = 0; dataIndex < dataLen; dataIndex += step) {\n    if (SymbolClz.getSymbolSize(data, dataIndex // Only for cartesian, where `isHorizontal` exists.\n    )[categoryAxis.isHorizontal() ? 1 : 0] // Empirical number\n    * 1.5 > availSize) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isPointNull(x, y) {\n  return isNaN(x) || isNaN(y);\n}\n\nfunction getLastIndexNotNull(points) {\n  var len = points.length / 2;\n\n  for (; len > 0; len--) {\n    if (!isPointNull(points[len * 2 - 2], points[len * 2 - 1])) {\n      break;\n    }\n  }\n\n  return len - 1;\n}\n\nfunction getPointAtIndex(points, idx) {\n  return [points[idx * 2], points[idx * 2 + 1]];\n}\n\nfunction getIndexRange(points, xOrY, dim) {\n  var len = points.length / 2;\n  var dimIdx = dim === 'x' ? 0 : 1;\n  var a;\n  var b;\n  var prevIndex = 0;\n  var nextIndex = -1;\n\n  for (var i = 0; i < len; i++) {\n    b = points[i * 2 + dimIdx];\n\n    if (isNaN(b) || isNaN(points[i * 2 + 1 - dimIdx])) {\n      continue;\n    }\n\n    if (i === 0) {\n      a = b;\n      continue;\n    }\n\n    if (a <= xOrY && b >= xOrY || a >= xOrY && b <= xOrY) {\n      nextIndex = i;\n      break;\n    }\n\n    prevIndex = i;\n    a = b;\n  }\n\n  return {\n    range: [prevIndex, nextIndex],\n    t: (xOrY - a) / (b - a)\n  };\n}\n\nfunction anyStateShowEndLabel(seriesModel) {\n  if (seriesModel.get(['endLabel', 'show'])) {\n    return true;\n  }\n\n  for (var i = 0; i < SPECIAL_STATES.length; i++) {\n    if (seriesModel.get([SPECIAL_STATES[i], 'endLabel', 'show'])) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction createLineClipPath(lineView, coordSys, hasAnimation, seriesModel) {\n  if (isCoordinateSystemType(coordSys, 'cartesian2d')) {\n    var endLabelModel_1 = seriesModel.getModel('endLabel');\n    var valueAnimation_1 = endLabelModel_1.get('valueAnimation');\n    var data_1 = seriesModel.getData();\n    var labelAnimationRecord_1 = {\n      lastFrameIndex: 0\n    };\n    var during = anyStateShowEndLabel(seriesModel) ? function (percent, clipRect) {\n      lineView._endLabelOnDuring(percent, clipRect, data_1, labelAnimationRecord_1, valueAnimation_1, endLabelModel_1, coordSys);\n    } : null;\n    var isHorizontal = coordSys.getBaseAxis().isHorizontal();\n    var clipPath = createGridClipPath(coordSys, hasAnimation, seriesModel, function () {\n      var endLabel = lineView._endLabel;\n\n      if (endLabel && hasAnimation) {\n        if (labelAnimationRecord_1.originalX != null) {\n          endLabel.attr({\n            x: labelAnimationRecord_1.originalX,\n            y: labelAnimationRecord_1.originalY\n          });\n        }\n      }\n    }, during); // Expand clip shape to avoid clipping when line value exceeds axis\n\n    if (!seriesModel.get('clip', true)) {\n      var rectShape = clipPath.shape;\n      var expandSize = Math.max(rectShape.width, rectShape.height);\n\n      if (isHorizontal) {\n        rectShape.y -= expandSize;\n        rectShape.height += expandSize * 2;\n      } else {\n        rectShape.x -= expandSize;\n        rectShape.width += expandSize * 2;\n      }\n    } // Set to the final frame. To make sure label layout is right.\n\n\n    if (during) {\n      during(1, clipPath);\n    }\n\n    return clipPath;\n  } else {\n    if (process.env.NODE_ENV !== 'production') {\n      if (seriesModel.get(['endLabel', 'show'])) {\n        console.warn('endLabel is not supported for lines in polar systems.');\n      }\n    }\n\n    return createPolarClipPath(coordSys, hasAnimation, seriesModel);\n  }\n}\n\nfunction getEndLabelStateSpecified(endLabelModel, coordSys) {\n  var baseAxis = coordSys.getBaseAxis();\n  var isHorizontal = baseAxis.isHorizontal();\n  var isBaseInversed = baseAxis.inverse;\n  var align = isHorizontal ? isBaseInversed ? 'right' : 'left' : 'center';\n  var verticalAlign = isHorizontal ? 'middle' : isBaseInversed ? 'top' : 'bottom';\n  return {\n    normal: {\n      align: endLabelModel.get('align') || align,\n      verticalAlign: endLabelModel.get('verticalAlign') || verticalAlign\n    }\n  };\n}\n\nvar LineView =\n/** @class */\nfunction (_super) {\n  __extends(LineView, _super);\n\n  function LineView() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  LineView.prototype.init = function () {\n    var lineGroup = new graphic.Group();\n    var symbolDraw = new SymbolDraw();\n    this.group.add(symbolDraw.group);\n    this._symbolDraw = symbolDraw;\n    this._lineGroup = lineGroup;\n  };\n\n  LineView.prototype.render = function (seriesModel, ecModel, api) {\n    var _this = this;\n\n    var coordSys = seriesModel.coordinateSystem;\n    var group = this.group;\n    var data = seriesModel.getData();\n    var lineStyleModel = seriesModel.getModel('lineStyle');\n    var areaStyleModel = seriesModel.getModel('areaStyle');\n    var points = data.getLayout('points') || [];\n    var isCoordSysPolar = coordSys.type === 'polar';\n    var prevCoordSys = this._coordSys;\n    var symbolDraw = this._symbolDraw;\n    var polyline = this._polyline;\n    var polygon = this._polygon;\n    var lineGroup = this._lineGroup;\n    var hasAnimation = seriesModel.get('animation');\n    var isAreaChart = !areaStyleModel.isEmpty();\n    var valueOrigin = areaStyleModel.get('origin');\n    var dataCoordInfo = prepareDataCoordInfo(coordSys, data, valueOrigin);\n    var stackedOnPoints = isAreaChart && getStackedOnPoints(coordSys, data, dataCoordInfo);\n    var showSymbol = seriesModel.get('showSymbol');\n    var isIgnoreFunc = showSymbol && !isCoordSysPolar && getIsIgnoreFunc(seriesModel, data, coordSys); // Remove temporary symbols\n\n    var oldData = this._data;\n    oldData && oldData.eachItemGraphicEl(function (el, idx) {\n      if (el.__temp) {\n        group.remove(el);\n        oldData.setItemGraphicEl(idx, null);\n      }\n    }); // Remove previous created symbols if showSymbol changed to false\n\n    if (!showSymbol) {\n      symbolDraw.remove();\n    }\n\n    group.add(lineGroup); // FIXME step not support polar\n\n    var step = !isCoordSysPolar ? seriesModel.get('step') : false;\n    var clipShapeForSymbol;\n\n    if (coordSys && coordSys.getArea && seriesModel.get('clip', true)) {\n      clipShapeForSymbol = coordSys.getArea(); // Avoid float number rounding error for symbol on the edge of axis extent.\n      // See #7913 and `test/dataZoom-clip.html`.\n\n      if (clipShapeForSymbol.width != null) {\n        clipShapeForSymbol.x -= 0.1;\n        clipShapeForSymbol.y -= 0.1;\n        clipShapeForSymbol.width += 0.2;\n        clipShapeForSymbol.height += 0.2;\n      } else if (clipShapeForSymbol.r0) {\n        clipShapeForSymbol.r0 -= 0.5;\n        clipShapeForSymbol.r += 0.5;\n      }\n    }\n\n    this._clipShapeForSymbol = clipShapeForSymbol;\n    var visualColor = getVisualGradient(data, coordSys, api) || data.getVisual('style')[data.getVisual('drawType')]; // Initialization animation or coordinate system changed\n\n    if (!(polyline && prevCoordSys.type === coordSys.type && step === this._step)) {\n      showSymbol && symbolDraw.updateData(data, {\n        isIgnore: isIgnoreFunc,\n        clipShape: clipShapeForSymbol,\n        disableAnimation: true,\n        getSymbolPoint: function (idx) {\n          return [points[idx * 2], points[idx * 2 + 1]];\n        }\n      });\n      hasAnimation && this._initSymbolLabelAnimation(data, coordSys, clipShapeForSymbol);\n\n      if (step) {\n        // TODO If stacked series is not step\n        points = turnPointsIntoStep(points, coordSys, step);\n\n        if (stackedOnPoints) {\n          stackedOnPoints = turnPointsIntoStep(stackedOnPoints, coordSys, step);\n        }\n      }\n\n      polyline = this._newPolyline(points);\n\n      if (isAreaChart) {\n        polygon = this._newPolygon(points, stackedOnPoints);\n      } // NOTE: Must update _endLabel before setClipPath.\n\n\n      if (!isCoordSysPolar) {\n        this._initOrUpdateEndLabel(seriesModel, coordSys, convertToColorString(visualColor));\n      }\n\n      lineGroup.setClipPath(createLineClipPath(this, coordSys, true, seriesModel));\n    } else {\n      if (isAreaChart && !polygon) {\n        // If areaStyle is added\n        polygon = this._newPolygon(points, stackedOnPoints);\n      } else if (polygon && !isAreaChart) {\n        // If areaStyle is removed\n        lineGroup.remove(polygon);\n        polygon = this._polygon = null;\n      } // NOTE: Must update _endLabel before setClipPath.\n\n\n      if (!isCoordSysPolar) {\n        this._initOrUpdateEndLabel(seriesModel, coordSys, convertToColorString(visualColor));\n      } // Update clipPath\n\n\n      var oldClipPath = lineGroup.getClipPath();\n\n      if (oldClipPath) {\n        var newClipPath = createLineClipPath(this, coordSys, false, seriesModel);\n        graphic.initProps(oldClipPath, {\n          shape: newClipPath.shape\n        }, seriesModel);\n      } else {\n        lineGroup.setClipPath(createLineClipPath(this, coordSys, true, seriesModel));\n      } // Always update, or it is wrong in the case turning on legend\n      // because points are not changed\n\n\n      showSymbol && symbolDraw.updateData(data, {\n        isIgnore: isIgnoreFunc,\n        clipShape: clipShapeForSymbol,\n        disableAnimation: true,\n        getSymbolPoint: function (idx) {\n          return [points[idx * 2], points[idx * 2 + 1]];\n        }\n      }); // In the case data zoom triggerred refreshing frequently\n      // Data may not change if line has a category axis. So it should animate nothing\n\n      if (!isPointsSame(this._stackedOnPoints, stackedOnPoints) || !isPointsSame(this._points, points)) {\n        if (hasAnimation) {\n          this._doUpdateAnimation(data, stackedOnPoints, coordSys, api, step, valueOrigin);\n        } else {\n          // Not do it in update with animation\n          if (step) {\n            // TODO If stacked series is not step\n            points = turnPointsIntoStep(points, coordSys, step);\n\n            if (stackedOnPoints) {\n              stackedOnPoints = turnPointsIntoStep(stackedOnPoints, coordSys, step);\n            }\n          }\n\n          polyline.setShape({\n            points: points\n          });\n          polygon && polygon.setShape({\n            points: points,\n            stackedOnPoints: stackedOnPoints\n          });\n        }\n      }\n    }\n\n    var focus = seriesModel.get(['emphasis', 'focus']);\n    var blurScope = seriesModel.get(['emphasis', 'blurScope']);\n    polyline.useStyle(zrUtil.defaults( // Use color in lineStyle first\n    lineStyleModel.getLineStyle(), {\n      fill: 'none',\n      stroke: visualColor,\n      lineJoin: 'bevel'\n    }));\n    setStatesStylesFromModel(polyline, seriesModel, 'lineStyle');\n\n    if (polyline.style.lineWidth > 0 && seriesModel.get(['emphasis', 'lineStyle', 'width']) === 'bolder') {\n      var emphasisLineStyle = polyline.getState('emphasis').style;\n      emphasisLineStyle.lineWidth = +polyline.style.lineWidth + 1;\n    } // Needs seriesIndex for focus\n\n\n    getECData(polyline).seriesIndex = seriesModel.seriesIndex;\n    enableHoverEmphasis(polyline, focus, blurScope);\n    var smooth = getSmooth(seriesModel.get('smooth'));\n    var smoothMonotone = seriesModel.get('smoothMonotone');\n    var connectNulls = seriesModel.get('connectNulls');\n    polyline.setShape({\n      smooth: smooth,\n      smoothMonotone: smoothMonotone,\n      connectNulls: connectNulls\n    });\n\n    if (polygon) {\n      var stackedOnSeries = data.getCalculationInfo('stackedOnSeries');\n      var stackedOnSmooth = 0;\n      polygon.useStyle(zrUtil.defaults(areaStyleModel.getAreaStyle(), {\n        fill: visualColor,\n        opacity: 0.7,\n        lineJoin: 'bevel',\n        decal: data.getVisual('style').decal\n      }));\n\n      if (stackedOnSeries) {\n        stackedOnSmooth = getSmooth(stackedOnSeries.get('smooth'));\n      }\n\n      polygon.setShape({\n        smooth: smooth,\n        stackedOnSmooth: stackedOnSmooth,\n        smoothMonotone: smoothMonotone,\n        connectNulls: connectNulls\n      });\n      setStatesStylesFromModel(polygon, seriesModel, 'areaStyle'); // Needs seriesIndex for focus\n\n      getECData(polygon).seriesIndex = seriesModel.seriesIndex;\n      enableHoverEmphasis(polygon, focus, blurScope);\n    }\n\n    var changePolyState = function (toState) {\n      _this._changePolyState(toState);\n    };\n\n    data.eachItemGraphicEl(function (el) {\n      // Switch polyline / polygon state if element changed its state.\n      el && (el.onHoverStateChange = changePolyState);\n    });\n    this._polyline.onHoverStateChange = changePolyState;\n    this._data = data; // Save the coordinate system for transition animation when data changed\n\n    this._coordSys = coordSys;\n    this._stackedOnPoints = stackedOnPoints;\n    this._points = points;\n    this._step = step;\n    this._valueOrigin = valueOrigin;\n\n    if (seriesModel.get('triggerLineEvent')) {\n      this.packEventData(seriesModel, polyline);\n      polygon && this.packEventData(seriesModel, polygon);\n    }\n  };\n\n  LineView.prototype.packEventData = function (seriesModel, el) {\n    getECData(el).eventData = {\n      componentType: 'series',\n      componentSubType: 'line',\n      componentIndex: seriesModel.componentIndex,\n      seriesIndex: seriesModel.seriesIndex,\n      seriesName: seriesModel.name,\n      seriesType: 'line'\n    };\n  };\n\n  LineView.prototype.highlight = function (seriesModel, ecModel, api, payload) {\n    var data = seriesModel.getData();\n    var dataIndex = modelUtil.queryDataIndex(data, payload);\n\n    this._changePolyState('emphasis');\n\n    if (!(dataIndex instanceof Array) && dataIndex != null && dataIndex >= 0) {\n      var points = data.getLayout('points');\n      var symbol = data.getItemGraphicEl(dataIndex);\n\n      if (!symbol) {\n        // Create a temporary symbol if it is not exists\n        var x = points[dataIndex * 2];\n        var y = points[dataIndex * 2 + 1];\n\n        if (isNaN(x) || isNaN(y)) {\n          // Null data\n          return;\n        } // fix #11360: should't draw symbol outside clipShapeForSymbol\n\n\n        if (this._clipShapeForSymbol && !this._clipShapeForSymbol.contain(x, y)) {\n          return;\n        }\n\n        var zlevel = seriesModel.get('zlevel');\n        var z = seriesModel.get('z');\n        symbol = new SymbolClz(data, dataIndex);\n        symbol.x = x;\n        symbol.y = y;\n        symbol.setZ(zlevel, z); // ensure label text of the temporary symbol is in front of line and area polygon\n\n        var symbolLabel = symbol.getSymbolPath().getTextContent();\n\n        if (symbolLabel) {\n          symbolLabel.zlevel = zlevel;\n          symbolLabel.z = z;\n          symbolLabel.z2 = this._polyline.z2 + 1;\n        }\n\n        symbol.__temp = true;\n        data.setItemGraphicEl(dataIndex, symbol); // Stop scale animation\n\n        symbol.stopSymbolAnimation(true);\n        this.group.add(symbol);\n      }\n\n      symbol.highlight();\n    } else {\n      // Highlight whole series\n      ChartView.prototype.highlight.call(this, seriesModel, ecModel, api, payload);\n    }\n  };\n\n  LineView.prototype.downplay = function (seriesModel, ecModel, api, payload) {\n    var data = seriesModel.getData();\n    var dataIndex = modelUtil.queryDataIndex(data, payload);\n\n    this._changePolyState('normal');\n\n    if (dataIndex != null && dataIndex >= 0) {\n      var symbol = data.getItemGraphicEl(dataIndex);\n\n      if (symbol) {\n        if (symbol.__temp) {\n          data.setItemGraphicEl(dataIndex, null);\n          this.group.remove(symbol);\n        } else {\n          symbol.downplay();\n        }\n      }\n    } else {\n      // FIXME\n      // can not downplay completely.\n      // Downplay whole series\n      ChartView.prototype.downplay.call(this, seriesModel, ecModel, api, payload);\n    }\n  };\n\n  LineView.prototype._changePolyState = function (toState) {\n    var polygon = this._polygon;\n    setStatesFlag(this._polyline, toState);\n    polygon && setStatesFlag(polygon, toState);\n  };\n\n  LineView.prototype._newPolyline = function (points) {\n    var polyline = this._polyline; // Remove previous created polyline\n\n    if (polyline) {\n      this._lineGroup.remove(polyline);\n    }\n\n    polyline = new ECPolyline({\n      shape: {\n        points: points\n      },\n      segmentIgnoreThreshold: 2,\n      z2: 10\n    });\n\n    this._lineGroup.add(polyline);\n\n    this._polyline = polyline;\n    return polyline;\n  };\n\n  LineView.prototype._newPolygon = function (points, stackedOnPoints) {\n    var polygon = this._polygon; // Remove previous created polygon\n\n    if (polygon) {\n      this._lineGroup.remove(polygon);\n    }\n\n    polygon = new ECPolygon({\n      shape: {\n        points: points,\n        stackedOnPoints: stackedOnPoints\n      },\n      segmentIgnoreThreshold: 2\n    });\n\n    this._lineGroup.add(polygon);\n\n    this._polygon = polygon;\n    return polygon;\n  };\n\n  LineView.prototype._initSymbolLabelAnimation = function (data, coordSys, clipShape) {\n    var isHorizontalOrRadial;\n    var isCoordSysPolar;\n    var baseAxis = coordSys.getBaseAxis();\n    var isAxisInverse = baseAxis.inverse;\n\n    if (coordSys.type === 'cartesian2d') {\n      isHorizontalOrRadial = baseAxis.isHorizontal();\n      isCoordSysPolar = false;\n    } else if (coordSys.type === 'polar') {\n      isHorizontalOrRadial = baseAxis.dim === 'angle';\n      isCoordSysPolar = true;\n    }\n\n    var seriesModel = data.hostModel;\n    var seriesDuration = seriesModel.get('animationDuration');\n\n    if (typeof seriesDuration === 'function') {\n      seriesDuration = seriesDuration(null);\n    }\n\n    var seriesDalay = seriesModel.get('animationDelay') || 0;\n    var seriesDalayValue = typeof seriesDalay === 'function' ? seriesDalay(null) : seriesDalay;\n    data.eachItemGraphicEl(function (symbol, idx) {\n      var el = symbol;\n\n      if (el) {\n        var point = [symbol.x, symbol.y];\n        var start = void 0;\n        var end = void 0;\n        var current = void 0;\n\n        if (clipShape) {\n          if (isCoordSysPolar) {\n            var polarClip = clipShape;\n            var coord = coordSys.pointToCoord(point);\n\n            if (isHorizontalOrRadial) {\n              start = polarClip.startAngle;\n              end = polarClip.endAngle;\n              current = -coord[1] / 180 * Math.PI;\n            } else {\n              start = polarClip.r0;\n              end = polarClip.r;\n              current = coord[0];\n            }\n          } else {\n            var gridClip = clipShape;\n\n            if (isHorizontalOrRadial) {\n              start = gridClip.x;\n              end = gridClip.x + gridClip.width;\n              current = symbol.x;\n            } else {\n              start = gridClip.y + gridClip.height;\n              end = gridClip.y;\n              current = symbol.y;\n            }\n          }\n        }\n\n        var ratio = end === start ? 0 : (current - start) / (end - start);\n\n        if (isAxisInverse) {\n          ratio = 1 - ratio;\n        }\n\n        var delay = typeof seriesDalay === 'function' ? seriesDalay(idx) : seriesDuration * ratio + seriesDalayValue;\n        var symbolPath = el.getSymbolPath();\n        var text = symbolPath.getTextContent();\n        el.attr({\n          scaleX: 0,\n          scaleY: 0\n        });\n        el.animateTo({\n          scaleX: 1,\n          scaleY: 1\n        }, {\n          duration: 200,\n          setToFinal: true,\n          delay: delay\n        });\n\n        if (text) {\n          text.animateFrom({\n            style: {\n              opacity: 0\n            }\n          }, {\n            duration: 300,\n            delay: delay\n          });\n        }\n\n        symbolPath.disableLabelAnimation = true;\n      }\n    });\n  };\n\n  LineView.prototype._initOrUpdateEndLabel = function (seriesModel, coordSys, inheritColor) {\n    var endLabelModel = seriesModel.getModel('endLabel');\n\n    if (anyStateShowEndLabel(seriesModel)) {\n      var data_2 = seriesModel.getData();\n      var polyline = this._polyline;\n      var endLabel = this._endLabel;\n\n      if (!endLabel) {\n        endLabel = this._endLabel = new graphic.Text({\n          z2: 200 // should be higher than item symbol\n\n        });\n        endLabel.ignoreClip = true;\n        polyline.setTextContent(this._endLabel);\n        polyline.disableLabelAnimation = true;\n      } // Find last non-NaN data to display data\n\n\n      var dataIndex = getLastIndexNotNull(data_2.getLayout('points'));\n\n      if (dataIndex >= 0) {\n        setLabelStyle(polyline, getLabelStatesModels(seriesModel, 'endLabel'), {\n          inheritColor: inheritColor,\n          labelFetcher: seriesModel,\n          labelDataIndex: dataIndex,\n          defaultText: function (dataIndex, opt, interpolatedValue) {\n            return interpolatedValue != null ? getDefaultInterpolatedLabel(data_2, interpolatedValue) : getDefaultLabel(data_2, dataIndex);\n          },\n          enableTextSetter: true\n        }, getEndLabelStateSpecified(endLabelModel, coordSys));\n        polyline.textConfig.position = null;\n      }\n    } else if (this._endLabel) {\n      this._polyline.removeTextContent();\n\n      this._endLabel = null;\n    }\n  };\n\n  LineView.prototype._endLabelOnDuring = function (percent, clipRect, data, animationRecord, valueAnimation, endLabelModel, coordSys) {\n    var endLabel = this._endLabel;\n    var polyline = this._polyline;\n\n    if (endLabel) {\n      // NOTE: Don't remove percent < 1. percent === 1 means the first frame during render.\n      // The label is not prepared at this time.\n      if (percent < 1 && animationRecord.originalX == null) {\n        animationRecord.originalX = endLabel.x;\n        animationRecord.originalY = endLabel.y;\n      }\n\n      var points = data.getLayout('points');\n      var seriesModel = data.hostModel;\n      var connectNulls = seriesModel.get('connectNulls');\n      var precision = endLabelModel.get('precision');\n      var distance = endLabelModel.get('distance') || 0;\n      var baseAxis = coordSys.getBaseAxis();\n      var isHorizontal = baseAxis.isHorizontal();\n      var isBaseInversed = baseAxis.inverse;\n      var clipShape = clipRect.shape;\n      var xOrY = isBaseInversed ? isHorizontal ? clipShape.x : clipShape.y + clipShape.height : isHorizontal ? clipShape.x + clipShape.width : clipShape.y;\n      var distanceX = (isHorizontal ? distance : 0) * (isBaseInversed ? -1 : 1);\n      var distanceY = (isHorizontal ? 0 : -distance) * (isBaseInversed ? -1 : 1);\n      var dim = isHorizontal ? 'x' : 'y';\n      var dataIndexRange = getIndexRange(points, xOrY, dim);\n      var indices = dataIndexRange.range;\n      var diff = indices[1] - indices[0];\n      var value = void 0;\n\n      if (diff >= 1) {\n        // diff > 1 && connectNulls, which is on the null data.\n        if (diff > 1 && !connectNulls) {\n          var pt = getPointAtIndex(points, indices[0]);\n          endLabel.attr({\n            x: pt[0] + distanceX,\n            y: pt[1] + distanceY\n          });\n          valueAnimation && (value = seriesModel.getRawValue(indices[0]));\n        } else {\n          var pt = polyline.getPointOn(xOrY, dim);\n          pt && endLabel.attr({\n            x: pt[0] + distanceX,\n            y: pt[1] + distanceY\n          });\n          var startValue = seriesModel.getRawValue(indices[0]);\n          var endValue = seriesModel.getRawValue(indices[1]);\n          valueAnimation && (value = modelUtil.interpolateRawValues(data, precision, startValue, endValue, dataIndexRange.t));\n        }\n\n        animationRecord.lastFrameIndex = indices[0];\n      } else {\n        // If diff <= 0, which is the range is not found(Include NaN)\n        // Choose the first point or last point.\n        var idx = percent === 1 || animationRecord.lastFrameIndex > 0 ? indices[0] : 0;\n        var pt = getPointAtIndex(points, idx);\n        valueAnimation && (value = seriesModel.getRawValue(idx));\n        endLabel.attr({\n          x: pt[0] + distanceX,\n          y: pt[1] + distanceY\n        });\n      }\n\n      if (valueAnimation) {\n        labelInner(endLabel).setLabelText(value);\n      }\n    }\n  };\n  /**\n   * @private\n   */\n  // FIXME Two value axis\n\n\n  LineView.prototype._doUpdateAnimation = function (data, stackedOnPoints, coordSys, api, step, valueOrigin) {\n    var polyline = this._polyline;\n    var polygon = this._polygon;\n    var seriesModel = data.hostModel;\n    var diff = lineAnimationDiff(this._data, data, this._stackedOnPoints, stackedOnPoints, this._coordSys, coordSys, this._valueOrigin, valueOrigin);\n    var current = diff.current;\n    var stackedOnCurrent = diff.stackedOnCurrent;\n    var next = diff.next;\n    var stackedOnNext = diff.stackedOnNext;\n\n    if (step) {\n      // TODO If stacked series is not step\n      current = turnPointsIntoStep(diff.current, coordSys, step);\n      stackedOnCurrent = turnPointsIntoStep(diff.stackedOnCurrent, coordSys, step);\n      next = turnPointsIntoStep(diff.next, coordSys, step);\n      stackedOnNext = turnPointsIntoStep(diff.stackedOnNext, coordSys, step);\n    } // Don't apply animation if diff is large.\n    // For better result and avoid memory explosion problems like\n    // https://github.com/apache/incubator-echarts/issues/12229\n\n\n    if (getBoundingDiff(current, next) > 3000 || polygon && getBoundingDiff(stackedOnCurrent, stackedOnNext) > 3000) {\n      polyline.stopAnimation();\n      polyline.setShape({\n        points: next\n      });\n\n      if (polygon) {\n        polygon.stopAnimation();\n        polygon.setShape({\n          points: next,\n          stackedOnPoints: stackedOnNext\n        });\n      }\n\n      return;\n    }\n\n    polyline.shape.__points = diff.current;\n    polyline.shape.points = current;\n    var target = {\n      shape: {\n        points: next\n      }\n    }; // Also animate the original points.\n    // If points reference is changed when turning into step line.\n\n    if (diff.current !== current) {\n      target.shape.__points = diff.next;\n    } // Stop previous animation.\n\n\n    polyline.stopAnimation();\n    graphic.updateProps(polyline, target, seriesModel);\n\n    if (polygon) {\n      polygon.setShape({\n        // Reuse the points with polyline.\n        points: current,\n        stackedOnPoints: stackedOnCurrent\n      });\n      polygon.stopAnimation();\n      graphic.updateProps(polygon, {\n        shape: {\n          stackedOnPoints: stackedOnNext\n        }\n      }, seriesModel); // If use attr directly in updateProps.\n\n      if (polyline.shape.points !== polygon.shape.points) {\n        polygon.shape.points = polyline.shape.points;\n      }\n    }\n\n    var updatedDataInfo = [];\n    var diffStatus = diff.status;\n\n    for (var i = 0; i < diffStatus.length; i++) {\n      var cmd = diffStatus[i].cmd;\n\n      if (cmd === '=') {\n        var el = data.getItemGraphicEl(diffStatus[i].idx1);\n\n        if (el) {\n          updatedDataInfo.push({\n            el: el,\n            ptIdx: i // Index of points\n\n          });\n        }\n      }\n    }\n\n    if (polyline.animators && polyline.animators.length) {\n      polyline.animators[0].during(function () {\n        polygon && polygon.dirtyShape();\n        var points = polyline.shape.__points;\n\n        for (var i = 0; i < updatedDataInfo.length; i++) {\n          var el = updatedDataInfo[i].el;\n          var offset = updatedDataInfo[i].ptIdx * 2;\n          el.x = points[offset];\n          el.y = points[offset + 1];\n          el.markRedraw();\n        }\n      });\n    }\n  };\n\n  LineView.prototype.remove = function (ecModel) {\n    var group = this.group;\n    var oldData = this._data;\n\n    this._lineGroup.removeAll();\n\n    this._symbolDraw.remove(true); // Remove temporary created elements when highlighting\n\n\n    oldData && oldData.eachItemGraphicEl(function (el, idx) {\n      if (el.__temp) {\n        group.remove(el);\n        oldData.setItemGraphicEl(idx, null);\n      }\n    });\n    this._polyline = this._polygon = this._coordSys = this._points = this._stackedOnPoints = this._endLabel = this._data = null;\n  };\n\n  LineView.type = 'line';\n  return LineView;\n}(ChartView);\n\nexport default LineView;"]},"metadata":{},"sourceType":"module"}